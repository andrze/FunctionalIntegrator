#include "gaussquadrature.h"
#include <iostream>
#include <stdexcept>

IntegralConfiguration::IntegralConfiguration(double start, double end, size_t n) :
		start(start), end(end), n(n) {
}

GaussQuadrature::GaussQuadrature() {
	IntegralConfiguration i1(0, 0.05, 12), i2(0.1, 1, 20), i3(1., 2., 20), i4(2., 5.5, 20);
	configurations.push_back(i1);
	configurations.push_back(i2);
	configurations.push_back(i3);
	configurations.push_back(i4);

	roots[1] = { { 0.0000000000000000 } };
	weights[1] = { { 2.0000000000000000 } };
	roots[2] = { { -0.5773502691896258, 0.5773502691896258 } };
	weights[2] = { { 1.0000000000000000, 1.0000000000000000 } };
	roots[3] = { { 0.0000000000000000, -0.7745966692414834, 0.7745966692414834 } };
	weights[3] = { { 0.8888888888888890, 0.5555555555555554, 0.5555555555555554 } };
	roots[4] = { { -0.3399810435848563, 0.3399810435848563, -0.8611363115940530, 0.8611363115940530 } };
	weights[4] = { { 0.6521451548625462, 0.6521451548625462, 0.3478548451374540, 0.3478548451374540 } };
	roots[5] = {
			{ 0.0000000000000000, -0.5384693101056830, 0.5384693101056830, -0.9061798459386640, 0.9061798459386640 } };
	weights[5] = {
			{ 0.5688888888888889, 0.4786286704993666, 0.4786286704993666, 0.2369268850561892, 0.2369268850561892 } };
	roots[6] = { { -0.2386191860831969, 0.2386191860831969, -0.6612093864662645, 0.6612093864662645,
			-0.9324695142031520, 0.9324695142031520 } };
	weights[6] = { { 0.4679139345726910, 0.4679139345726910, 0.3607615730481388, 0.3607615730481388, 0.1713244923791703,
			0.1713244923791703 } };
	roots[7] = { { 0.0000000000000000, -0.4058451513773972, 0.4058451513773972, -0.7415311855993945, 0.7415311855993945,
			-0.9491079123427590, 0.9491079123427590 } };
	weights[7] = { { 0.4179591836734694, 0.3818300505051188, 0.3818300505051188, 0.2797053914892770, 0.2797053914892770,
			0.1294849661688692, 0.1294849661688692 } };
	roots[8] = { { -0.1834346424956498, 0.1834346424956498, -0.5255324099163290, 0.5255324099163290,
			-0.7966664774136268, 0.7966664774136268, -0.9602898564975360, 0.9602898564975360 } };
	weights[8] = { { 0.3626837833783619, 0.3626837833783619, 0.3137066458778875, 0.3137066458778875, 0.2223810344533752,
			0.2223810344533752, 0.1012285362903768, 0.1012285362903768 } };
	roots[9] = { { 0.0000000000000000, -0.3242534234038089, 0.3242534234038089, -0.6133714327005904, 0.6133714327005904,
			-0.8360311073266360, 0.8360311073266360, -0.9681602395076260, 0.9681602395076260 } };
	weights[9] = { { 0.3302393550012598, 0.3123470770400031, 0.3123470770400031, 0.2606106964029356, 0.2606106964029356,
			0.1806481606948604, 0.1806481606948604, 0.0812743883615772, 0.0812743883615772 } };
	roots[10] = { { -0.1488743389816312, 0.1488743389816312, -0.4333953941292473, 0.4333953941292473,
			-0.6794095682990244, 0.6794095682990244, -0.8650633666889850, 0.8650633666889850, -0.9739065285171720,
			0.9739065285171720 } };
	weights[10] = { { 0.2955242247147529, 0.2955242247147529, 0.2692667193099961, 0.2692667193099961,
			0.2190863625159846, 0.2190863625159846, 0.1494513491505826, 0.1494513491505826, 0.0666713443086868,
			0.0666713443086868 } };
	roots[11] = { { 0.0000000000000000, -0.2695431559523450, 0.2695431559523450, -0.5190961292068118,
			0.5190961292068118, -0.7301520055740493, 0.7301520055740493, -0.8870625997680950, 0.8870625997680950,
			-0.9782286581460570, 0.9782286581460570 } };
	weights[11] = { { 0.2729250867779006, 0.2628045445102467, 0.2628045445102467, 0.2331937645919949,
			0.2331937645919949, 0.1862902109277247, 0.1862902109277247, 0.1255803694649020, 0.1255803694649020,
			0.0556685671161734, 0.0556685671161734 } };
	roots[12] = { { -0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802,
			-0.5873179542866174, 0.5873179542866174, -0.7699026741943047, 0.7699026741943047, -0.9041172563704750,
			0.9041172563704750, -0.9815606342467190, 0.9815606342467190 } };
	weights[12] = { { 0.2491470458134027, 0.2491470458134027, 0.2334925365383557, 0.2334925365383557,
			0.2031674267230546, 0.2031674267230546, 0.1600783285433277, 0.1600783285433277, 0.1069393259953403,
			0.1069393259953403, 0.0471753363865111, 0.0471753363865111 } };
	roots[13] = { { 0.0000000000000000, -0.2304583159551348, 0.2304583159551348, -0.4484927510364469,
			0.4484927510364469, -0.6423493394403402, 0.6423493394403402, -0.8015780907333100, 0.8015780907333100,
			-0.9175983992229780, 0.9175983992229780, -0.9841830547185880, 0.9841830547185880 } };
	weights[13] = { { 0.2325515532308739, 0.2262831802628972, 0.2262831802628972, 0.2078160475368904,
			0.2078160475368904, 0.1781459807619603, 0.1781459807619603, 0.1388735102197756, 0.1388735102197756,
			0.0921214998376047, 0.0921214998376047, 0.0404840047653171, 0.0404840047653171 } };
	roots[14] = { { -0.1080549487073437, 0.1080549487073437, -0.3191123689278897, 0.3191123689278897,
			-0.5152486363581541, 0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.8272013150697650,
			0.8272013150697650, -0.9284348836635740, 0.9284348836635740, -0.9862838086968120, 0.9862838086968120 } };
	weights[14] = { { 0.2152638534631578, 0.2152638534631578, 0.2051984637212948, 0.2051984637212948,
			0.1855383974779413, 0.1855383974779413, 0.1572031671581620, 0.1572031671581620, 0.1215185706878534,
			0.1215185706878534, 0.0801580871596835, 0.0801580871596835, 0.0351194603317827, 0.0351194603317827 } };
	roots[15] = { { 0.0000000000000000, -0.2011940939974345, 0.2011940939974345, -0.3941513470775634,
			0.3941513470775634, -0.5709721726085388, 0.5709721726085388, -0.7244177313601701, 0.7244177313601701,
			-0.8482065834104270, 0.8482065834104270, -0.9372733924007060, 0.9372733924007060, -0.9879925180204850,
			0.9879925180204850 } };
	weights[15] = { { 0.2025782419255613, 0.1984314853271116, 0.1984314853271116, 0.1861610000155603,
			0.1861610000155603, 0.1662692058170190, 0.1662692058170190, 0.1395706779262907, 0.1395706779262907,
			0.1071592204672149, 0.1071592204672149, 0.0703660474881188, 0.0703660474881188, 0.0307532419960436,
			0.0307532419960436 } };
	roots[16] = { { -0.0950125098376374, 0.0950125098376374, -0.2816035507792589, 0.2816035507792589,
			-0.4580167776572274, 0.4580167776572274, -0.6178762444026438, 0.6178762444026438, -0.7554044083550030,
			0.7554044083550030, -0.8656312023878320, 0.8656312023878320, -0.9445750230732330, 0.9445750230732330,
			-0.9894009349916500, 0.9894009349916500 } };
	weights[16] = { { 0.1894506104550684, 0.1894506104550684, 0.1826034150449241, 0.1826034150449241,
			0.1691565193949936, 0.1691565193949936, 0.1495959888164916, 0.1495959888164916, 0.1246289712555212,
			0.1246289712555212, 0.0951585116836565, 0.0951585116836565, 0.0622535239385654, 0.0622535239385654,
			0.0271524594120497, 0.0271524594120497 } };
	roots[17] = { { 0.0000000000000000, -0.1784841814958479, 0.1784841814958479, -0.3512317634538763,
			0.3512317634538763, -0.5126905370864769, 0.5126905370864769, -0.6576711592166907, 0.6576711592166907,
			-0.7815140038968015, 0.7815140038968015, -0.8802391537269860, 0.8802391537269860, -0.9506755217687680,
			0.9506755217687680, -0.9905754753144170, 0.9905754753144170 } };
	weights[17] = { { 0.1794464703562065, 0.1765627053669927, 0.1765627053669927, 0.1680041021564503,
			0.1680041021564503, 0.1540457610768380, 0.1540457610768380, 0.1351363684684896, 0.1351363684684896,
			0.1118838471940557, 0.1118838471940557, 0.0850361483168416, 0.0850361483168416, 0.0554595293733178,
			0.0554595293733178, 0.0241483028686240, 0.0241483028686240 } };
	roots[18] = { { -0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055,
			-0.4117511614628427, 0.4117511614628427, -0.5597708310739476, 0.5597708310739476, -0.6916870430603533,
			0.6916870430603533, -0.8037049589725230, 0.8037049589725230, -0.8926024664975560, 0.8926024664975560,
			-0.9558239495713980, 0.9558239495713980, -0.9915651684209310, 0.9915651684209310 } };
	weights[18] = { { 0.1691423829631435, 0.1691423829631435, 0.1642764837458317, 0.1642764837458317,
			0.1546846751262665, 0.1546846751262665, 0.1406429146706085, 0.1406429146706085, 0.1225552067118038,
			0.1225552067118038, 0.1009420441066596, 0.1009420441066596, 0.0764257302603441, 0.0764257302603441,
			0.0497145488953434, 0.0497145488953434, 0.0216160135263676, 0.0216160135263676 } };
	roots[19] = { { 0.0000000000000000, -0.1603586456402254, 0.1603586456402254, -0.3165640999636298,
			0.3165640999636298, -0.4645707413759610, 0.4645707413759610, -0.6005453046616810, 0.6005453046616810,
			-0.7209661773352294, 0.7209661773352294, -0.8227146565371430, 0.8227146565371430, -0.9031559036148180,
			0.9031559036148180, -0.9602081521348300, 0.9602081521348300, -0.9924068438435840, 0.9924068438435840 } };
	weights[19] = { { 0.1610544498487837, 0.1589688433939542, 0.1589688433939542, 0.1527660420658686,
			0.1527660420658686, 0.1426067021736379, 0.1426067021736379, 0.1287539625387964, 0.1287539625387964,
			0.1115666455495775, 0.1115666455495775, 0.0914900216191361, 0.0914900216191361, 0.0690445427322803,
			0.0690445427322803, 0.0448142267672554, 0.0448142267672554, 0.0194617882300084, 0.0194617882300084 } };
	roots[20] = { { -0.0765265211334973, 0.0765265211334973, -0.2277858511416451, 0.2277858511416451,
			-0.3737060887154195, 0.3737060887154195, -0.5108670019508271, 0.5108670019508271, -0.6360536807265150,
			0.6360536807265150, -0.7463319064601508, 0.7463319064601508, -0.8391169718222190, 0.8391169718222190,
			-0.9122344282513260, 0.9122344282513260, -0.9639719272779140, 0.9639719272779140, -0.9931285991850950,
			0.9931285991850950 } };
	weights[20] = { { 0.1527533871307259, 0.1527533871307259, 0.1491729864726040, 0.1491729864726040,
			0.1420961093183816, 0.1420961093183816, 0.1316886384492807, 0.1316886384492807, 0.1181945319608023,
			0.1181945319608023, 0.1019301198187775, 0.1019301198187775, 0.0832767415578933, 0.0832767415578933,
			0.0626720483263628, 0.0626720483263628, 0.0406014298064162, 0.0406014298064162, 0.0176140071385003,
			0.0176140071385003 } };
}

double GaussQuadrature::integrate(std::function<double(double)> f, double a, double b, size_t n) {
	if (n == 0) {
		throw(std::invalid_argument("Number of integration points must be positive"));
	}
	if (n > 20) {
		throw(std::invalid_argument("Number of integration points larger than 20 not implemented"));
	}

	double sum = 0;

	for (size_t k = 0; k < n; k++) {
		double point = (a + b) / 2 + (b - a) * roots[n][k] / 2;
		sum += weights[n][k] * f(point);
	}

	return sum * (b - a) / 2;
}

double GaussQuadrature::integrate(std::function<double(double)> f, IntegralConfiguration conf) {
	return integrate(f, conf.start, conf.end, conf.n);
}

double gauss_legendre_integrate(std::function<double(double)> f) {
	GaussQuadrature integrator;
	auto configs = integrator.configurations;
	double integral = 0;

	for (size_t k = 0; k < configs.size(); k++) {
		integral += integrator.integrate(f, configs[k]);
	}

	return integral;
}

/*double gauss_legendre_integrate(std::function<double(double)> f, size_t n){
 GaussQuadrature integrator;
 double interval = 0.5;
 double base_start = 1e-4, base_end = 1e-1;

 double integral = integrator.integrate(base_start,base_end,f,4);
 double a=base_end, b=base_end+interval;

 for(size_t k=0; k<20; k++, a+=interval, interval*=2, b+=interval){
 double contribution = integrator.integrate(a, b, f, n);
 integral += contribution;
 if(std::abs(integral) > 1e-4 && std::abs(contribution/integral)<1e-4){
 break;
 }
 }

 return integral;
 }*/
